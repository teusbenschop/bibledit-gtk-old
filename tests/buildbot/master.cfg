# -*- python -*-
# ex: set syntax=python:

# Bibledit Buildmaster Configuration File

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# the 'slaves' list defines the set of allowable buildslaves. Each element is
# a BuildSlave object, which is created with bot-name, bot-password.  These
# correspond to values given to the buildslave's mktap invocation.
from buildbot.buildslave import BuildSlave
c['slaves'] = []
c['slaves'].append(BuildSlave("rachael", "PASSWORD"))
c['slaves'].append(BuildSlave("rebecca", "PASSWORD"))
c['slaves'].append(BuildSlave("caleb", "PASSWORD"))
c['slaves'].append(BuildSlave("glenn", "PASSWORD"))

# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)
# This is the port the buildmaster listens on.

# Touch-Tone for BUILD
c['slavePortnum'] = 28453

####### CHANGESOURCES

from buildbot.changes.pb import PBChangeSource
c['change_source'] = PBChangeSource(user="change", passwd="changepw")

####### SCHEDULERS

## configure the Schedulers

from buildbot.scheduler import Nightly
from buildbot.scheduler import Scheduler
c['schedulers'] = []
c['schedulers'].append(Scheduler(name="master", branch=None,
                                 treeStableTimer=2*60,
                                 builderNames=["bibledit-win32",
                                               "bibledit-linux-amd64"]))

# Yes, this is ugly. Build regardless.
c['schedulers'].append(Nightly(name="nightly",
                               hour=13,
                               minute=0,
                               builderNames=["bibledit-win32",
                                             "bibledit-win32-opt",
                                             "bibledit-linux-amd64"]))

####### BUILDERS

# the 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this builder
#  slavename (required): which slave to use (must appear in c['bots'])
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds

from buildbot.steps.source import Git
from buildbot.steps.shell import ShellCommand
from buildbot.steps.transfer import FileUpload
from buildbot.process.factory import GNUAutoconf
from buildbot.process.properties import WithProperties

class Install(ShellCommand):
  name = "install"
  haltOnFailure = "1"
  flunkOnFailure = "1"
  description = [ "Running make install" ]
  descriptionDone = [ "Installed to builddir/root" ]
  command = [ "make", "-j", "8", "install" ]

class CreateZIP(ShellCommand):
  name = "createzip"
  haltOnFailure = "1"
  flunkOnFailure = "1"
  description = [ "Creating ZIP file..." ]
  descriptionDone = [ "ZIP file created." ]

  def __init__(self, filename, root, **kwargs):
    self.command = [ "zip", "-r", filename, root ]
    ShellCommand.__init__(self, **kwargs)

class PostFile(FileUpload):
  """ Provides a link to the uploaded file. """

  def __init__(self, slavesrc, masterdest, workdir=None, maxsize=None,
               blocksize=16384, mode=None, urlBase=None, **buildstep_kwargs):
    FileUpload.__init__(self, slavesrc, masterdest, workdir, maxsize, blocksize, mode, **buildstep_kwargs)
    self._downloadurl = urlBase

  def finished(self, result):
    url = self._downloadurl + self.getProperty("buildername") + "-" + self.getProperty("got_revision") + ".zip"
    self.addURL("Download", url)
    FileUpload.finished(self, result)

class WindowsBuilderFactory(GNUAutoconf):
  """ Windows Builder Factory creates a ZIP with bins and redistributables. """
  def __init__(self,
               source=Git(repourl="git://git.sv.gnu.org/bibledit.git"),
               configure="../mingw-configure",
               configureEnv={},
               configureFlags=[],
               compile=["../mingw-make", "-j", "8", "all"],
               test=None,
               install=["make", "install"],
               buildername="bibledit-win32",
               optimize=False
              ):

    # Important filenames and paths
    # TODO(dennison): Figure out how to generate prefix
    root = "/home/buildslave/%s/root" % (buildername)

    if optimize:
      # Yes, this clobbers CFLAGS
      configureEnv["CFLAGS"] = "-O2"

    if configureFlags:
      cfgflags = ["--prefix=" + root] + configureFlags
    else:
      cfgflags = ["--prefix=" + root]

    # Run common build steps first
    GNUAutoconf.__init__(self,
                         source,
                         configure,
                         configureEnv,
                         cfgflags,
                         compile,
                         test
                        )
  
    # Make install into the root
    self.addStep(Install, command=install)

    # ZIP up the root
    self.addStep(CreateZIP,
                 filename=WithProperties("%(buildername)s-%(got_revision)s.zip"),
                 root=root)

    # Post file for download
    self.addStep(PostFile,
                 slavesrc=WithProperties("%(buildername)s-%(got_revision)s.zip"),
                 masterdest=WithProperties("public_html/builds/%(buildername)s-%(got_revision)s.zip"),
                 urlBase="http://buildbot.biblesint.org/builds/"
                )

PosixBibleditBuilder = GNUAutoconf(source=Git(repourl="git://git.sv.gnu.org/bibledit.git"),
                                   compile=["make", "-j", "8", "all"],
                                   test=None
                                  )

builder_bibledit_win32 = {'name': "bibledit-win32",
                          'slavename': "rachael",
                          'builddir': "bibledit-win32",
                          'factory': WindowsBuilderFactory()
                         }
builder_bibledit_win32_opt = {'name': "bibledit-win32-opt",
                              'slavename': "rachael",
                              'builddir': "bibledit-win32-opt",
                              'factory': WindowsBuilderFactory(optimize=True)
                             }
builder_bibledit_mac_i386 = {'name': "bibledit-mac-i386",
                             'slavename': "caleb",
                             'builddir': "bibledit-mac-i386",
                             'factory': PosixBibleditBuilder
                            }
builder_bibledit_linux_amd64 = {'name': "bibledit-linux-amd64",
                               'slavename': "rachael",
                               'builddir': "bibledit-linux-amd64",
                               'factory': PosixBibleditBuilder
                              }

c['builders'] = [builder_bibledit_win32,
                 builder_bibledit_win32_opt,
                 builder_bibledit_mac_i386,
                 builder_bibledit_linux_amd64]

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

# Use allowForce=True (boolean, not a string. ie: not 'True') to allow
# Forcing Builds in the Web User Interface. The default is False.

from buildbot.status import html
# Public
c['status'].append(html.WebStatus(http_port="tcp:8010:interface=127.0.0.1",allowForce=False))
# Private
c['status'].append(html.WebStatus(http_port="tcp:8011:interface=127.0.0.1",allowForce=True))

from buildbot.status import mail
c['status'].append(mail.MailNotifier(fromaddr="buildbot@biblesint.org",
                                     extraRecipients=["bibledit-development@nongnu.org"],
                                     sendToInterestedUsers=False,
                                     mode="problem"
                                    ))

from buildbot.status import words
c['status'].append(words.IRC(host="irc.freenode.net", nick="bibledit-builder",
                             channels=["#bibledit"]))

# This is for client utils/dashboards
#from buildbot.status import client
#c['status'].append(client.PBListener(9988))


####### DEBUGGING OPTIONS

# if you set 'debugPassword', then you can connect to the buildmaster with
# the diagnostic tool in contrib/debugclient.py . From this tool, you can
# manually force builds and inject changes, which may be useful for testing
# your buildmaster without actually committing changes to your repository (or
# before you have a functioning 'sources' set up). The debug tool uses the
# same port number as the slaves do: 'slavePortnum'.

#c['debugPassword'] = "debugpassword"

# if you set 'manhole', you can ssh into the buildmaster and get an
# interactive python shell, which may be useful for debugging buildbot
# internals. It is probably only useful for buildbot developers. You can also
# use an authorized_keys file, or plain telnet.
#from buildbot import manhole
#c['manhole'] = manhole.PasswordManhole("tcp:9999:interface=127.0.0.1",
#                                       "admin", "password")


####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = "Bibledit"
c['projectURL'] = "http://bibledit.org/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://buildbot.biblesint.org/"
